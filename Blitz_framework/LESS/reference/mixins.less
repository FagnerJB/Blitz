// Mixins

// Centering an element based on its width

.width-center(@elWidth) {
  width: @elWidth + 0%;
  margin-left: ((100 - @elWidth) / 2) + 0%;
}

// Border radius for boxes 

.border-radius(@radius: 5px) {
  border-radius: @radius;
}

// Linear-gradient to color and back to origin

.linear-gradient(@origin: left, @start: #f0f0f0, @stop: #8c8b8b) {
  background-color: @stop;    /* fallback if linear-gradient is not supported */
  background-image: -webkit-linear-gradient(@origin, @start, @stop, @start);
  background-image: linear-gradient(@origin, @start, @stop, @start);
}

// Subtle Color Palette
// Usage: .generate-subtle-palette(#537F84); in custom

.generate-subtle-palette(@baseColor) {
  .subtle-1 {
    color: lighten(spin(@baseColor, 10), 20%);
  }
  .subtle-2 {
    color: lighten(spin(@baseColor, 5), 10%);
  }
  .subtle-3 {
    color: @baseColor;
  }
  .subtle-4 {
    color: darken(spin(@baseColor, -5), 10%);
  }
  .subtle-5 {
    color: darken(spin(@baseColor, -10), 20%);
  }
}

// Complementary Color Palette
// Usage: .generate-comp-palette(#537F84); in custom

.generate-comp-palette(@baseColor) {
  .comp-1 {
    color: lighten(@baseColor, 30%);
  }
  .comp-2 {
    color: lighten(@baseColor, 15%);;
  }
  .comp-3 {
    color: @baseColor;
  }
  .comp-4 {
    color: spin(@baseColor, 180);
  }
  .comp-5 {
    color: darken(spin(@baseColor, 180), 5%);
  }
}

// Creating cols

.generate-columns(@n, @i: 1) when (@i =< @n) {      // Useful for image grids
  .col-@{i} {
    width: (@i * 100% / @n);
  }
  .generate-columns(@n, (@i + 1));
}

// Progressive enhancements
  
.initial-letter(@size : 3, @sink : 3) {
  -webkit-initial-letter: @size @sink;
  initial-letter: @size @sink;
}

.flex-base(@grow, @shrink, @basis) {
  -webkit-flex: @grow @shrink @basis;
  flex: @grow @shrink @basis;
}

.reflowable-height(@img : 98vh, @caption : 3em, @min : 300px, @max : 1400px) {
  min-height: @min;
  height: -webkit-calc(~"@{img} - @{caption}");
  height: calc(~"@{img} - @{caption}");
  max-height: @max !important;
}

.background-size(@w, @h) {
  background-size: @w @h;
}

.background-position(@x, @y) {
  background-position: @x @y;
}

.text-align-last(@align : center) {
  text-align-last: @align;
}

.calc(@prop, @val1, @operator : "+", @val2) {
  @{prop}: -webkit-calc(~"@{val1} @{operator} @{val2}");
  @{prop}: calc(~"@{val1} @{operator} @{val2}");
};

// i18n

.text-emphasis(@emphasis-style : filled sesame) {
  // Available arguments: filled dot, open dot, filled circle, open circle,
  // filled double circle, open double-circle, filled triangle, open triangle,
  // filled sesame, open sesame
  text-emphasis: @emphasis-style;
  text-emphasis-style: @emphasis-style;
  -webkit-text-emphasis-style: @emphasis-style;
  font-style: normal !important; // Need to override italics/bold because this is an alternative emphasis.
  font-weight: normal !important;
}

// Utils

.apply-header-font()
  when not (@header-font-selector = undefined) 
  and not (@header-font-family = undefined) {
  @{header-font-selector} {
    font-family: @header-font-family;
  }
}

.protect-kindle-line-height(@line-height)
  when (isnumber(@min-line-height)) and (@line-height < @min-line-height) {
    @media @kf8 {
      line-height: @min-line-height;
      /* Minimum value Kindle supports */
    }
}